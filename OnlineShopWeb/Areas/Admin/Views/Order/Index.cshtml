@{
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

<div class="page-wrapper">
    <div class="order-wrapper">
        <div class="ow-header">
            <div class="owh-item owh-item-active" data-content="All">Tất cả đơn hàng</div>
            <div class="owh-item" data-content="Canceled">Đã hủy</div>
            <div class="owh-item" data-content="Processing">Đang xử lý</div>
            <div class="owh-item" data-content="Shipping">Đang vận chuyển</div>
            <div class="owh-item" data-content="Delivered">Đã giao</div>
        </div>
        <div class="ow_mainContent">
            <!-- Nội dung sẽ được tải động qua AJAX -->
        </div>
    </div>
    <div class="pagination-container"></div>
</div>


<!-- Modal -->
<div class="modal fade" id="transactionQueryModal" tabindex="-1" aria-labelledby="transactionQueryModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="transactionQueryModalLabel">Kết quả truy vấn giao dịch</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p id="transactionQueryMessage"></p>
                <pre id="transactionQueryData"></pre> <!-- Optional: Display raw data -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>


<!-- Modal xác nhận giao hàng -->
<div class="modal fade" id="deliveryConfirmationModal" tabindex="-1" aria-labelledby="deliveryConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deliveryConfirmationModalLabel">Xác nhận giao hàng</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="file" id="deliveryImages" class="form-control" accept=".jpg,.jpeg,.png,.gif" multiple required />
                <input type="hidden" id="orderId" name="orderId">
                <div id="imagePreview" class="mt-3 d-flex flex-wrap"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                <button type="button" id="submitDeliveryConfirmation" class="btn btn-primary">Xác nhận</button>
            </div>
        </div>
    </div>
</div>


<!-- Modal xác nhận giao hàng -->
<div class="modal fade" id="deliveryConfirmationModal" tabindex="-1" aria-labelledby="deliveryConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deliveryConfirmationModalLabel">Xác nhận giao hàng</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="imagePreview" class="mt-3"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal xác nhận giao hàng -->
<div class="modal fade" id="deliveryConfirmationModal-1" tabindex="-1" aria-labelledby="deliveryConfirmationModalLabel-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deliveryConfirmationModalLabel-1">Xác nhận giao hàng</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Vui lòng xem các ảnh xác nhận giao hàng dưới đây:</p>
                <div id="imagePreview-1" class="mt-3"></div> <!-- Khu vực hiển thị ảnh -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>
@section scripts {
    <script>
        $(document).ready(function () {
            const contentArea = $('.ow_mainContent');

            // Tải đơn hàng theo trạng thái
            function loadOrders(status, currentPage = 1, pageSize = 4) {
                contentArea.html("<p>Đang tải dữ liệu...</p>");

                $.ajax({
                    url: '/Admin/Order/GetOrdersByStatus',
                    type: 'GET',
                    data: { status: status, page: currentPage, pageSize: pageSize },
                    success: function (response) {
                        if (response.success) {
                            let htmlContent = '';

                            // Duyệt qua tất cả các đơn hàng trong response.data.Orders
                            response.data.Orders.forEach(function (item) {
                                htmlContent += `
    <div class="OrderListPartialView">
        <div class="order-list">
            <!-- Header Section -->
            <div class="order-header" data-order-id="${item.OrderId}">
                <div class="store-info">
                    <span class="store-name">
                        ${item.OrderCode ? `${item.OrderCode} - ` : ''}${item.OrderId} - <span class="order-status">${item.Status}</span>
                        ${item.OrderNotes ? ` - ${item.OrderNotes}` : ''}
                    </span>
                    <br>
                    <span class="recipient-info">
                        <strong>Người nhận:</strong> ${item.RecipientName}<br>
                        <strong>SĐT:</strong> ${item.RecipientPhoneNumber}<br>
                        <strong>Địa chỉ:</strong> ${item.RecipientAddress}
                    </span>
                    <br>
                    <span class="additional-info">
                        ${item.Status === "Canceled" ? `
                            <strong>Hủy bởi:</strong> ${item.CanceledBy || "N/A"}<br>
                            <strong>Thời gian hủy:</strong> ${item.CancellationTime ? new Date(item.CancellationTime).toLocaleString() : "N/A"}
                        ` : ''}
                        ${item.Status === "Delivered" ? `
                            <strong>Người xác nhận giao thành công:</strong> ${item.DeliveredBy || "N/A"}<br>
                            <strong>Thời xác nhận giao thành công:</strong> ${item.DeliveryConfirmationTime ? new Date(item.DeliveryConfirmationTime).toLocaleString() : "N/A"}
                        ` : ''}
                        ${item.Status === "Shipping" ? `
                            <strong>Thời gian vận chuyển:</strong> ${item.OrderConfirmationTime ? new Date(item.OrderConfirmationTime).toLocaleString() : "N/A"}
                        ` : ''}
                    </span>
                </div>
                <span class="payment-status">Trạng thái thanh toán: ${item.PaymentStatus}</span><br>
                <span class="payment-method">Phương thức thanh toán: ${item.PaymentMethod}</span>
                <div class="order-review-status">
                    <strong>Tổng số tiền: <span class="review-status">${item.TotalAmount.toLocaleString()} đ</span></strong>
                </div>
            </div>

            <!-- Order Details Section (Initially Hidden) -->
            <div class="order-details" data-order-id="${item.OrderId}" style="display:none;">
                <div class="product-list">
                    ${item.OrderDetails.map(orderItem => `
                    <div class="product-item">
                        <div class="product-image-1">
                            <img src="data:image/jpeg;base64,${orderItem.ProductImage}" alt="${orderItem.ProductName}" style="width:150px;height:150px;object-fit:cover;" />
                        </div>
                        <div class="product-info">
                            <h3>${orderItem.ProductName}</h3>
                            <p class="product-quantity">x ${orderItem.Quantity}</p>
                            <p class="product-price"><span>${(orderItem.Price).toLocaleString()} đ</span></p>
                        </div>
                        <div class="order-summary">
                            <p>${(orderItem.Price * orderItem.Quantity).toLocaleString()} đ</p>
                        </div>
                    </div>
                    `).join('')}
                </div>

                <div class="order-actions">
                    ${item.Status === "Processing" ? `
                        <button class="buy-confirm">Xác nhận</button>
                        <button class="buy-cancel">Hủy</button>
                    ` : ''}

                    ${item.Status === "Canceled" && item.PaymentStatus === "Completed" && item.PaymentMethod === "NCB" ? `
                        <button class="transaction-query">Truy vấn giao dịch</button>
                        <button class="refund-request">Hoàn tiền</button>
                    ` : ''}

                    ${item.Status === "Shipping" ? `
                        <button class="delivery-confirmation">Đã giao</button>
                    ` : ''}

                    ${item.Status === "Delivered" ? `
                        <button class="btn btn-success queryImage">Truy vấn Ảnh</button>
                    ` : ''}
                </div>
            </div>
        </div>
    </div>
`;


                            });

                            // Chèn HTML vào contentArea
                            contentArea.html(htmlContent);

                            // Tạo phân trang
                            createPagination(response.data.CurrentPage, response.data.TotalPages, status);
                        } else {
                            contentArea.text("Không thể tải dữ liệu đơn hàng.");
                        }

                    },
                    error: function () {
                        contentArea.text("Không thể tải dữ liệu đơn hàng.");
                    }
                });
            }


            function createPagination(currentPage, totalPages, status) {
                let paginationHtml = `
                                    <nav class="pagination-nav">
                                        <ul class="pagination justify-content-center">
                                            <!-- Previous Button -->
                                            <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                                                <a class="page-link" href="#" data-page="${currentPage - 1}">&laquo;</a>
                                            </li>`;

                // Các trang trước và sau trang hiện tại
                for (let i = Math.max(1, currentPage - 2); i <= Math.min(totalPages, currentPage + 2); i++) {
                    paginationHtml += `
                                        <li class="page-item ${i === currentPage ? 'active' : ''}">
                                            <a class="page-link" href="#" data-page="${i}">${i}</a>
                                        </li>`;
                }

                // Next Button
                paginationHtml += `
                                            <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                                                <a class="page-link" href="#" data-page="${currentPage + 1}">&raquo;</a>
                                            </li>
                                        </ul>
                                    </nav>`;

                // Chèn HTML phân trang vào khu vực phân trang
                $('.pagination-container').html(paginationHtml);

                // Gắn sự kiện click cho các nút phân trang
                $('.pagination .page-link').on('click', function (e) {
                    e.preventDefault();
                    let page = $(this).data('page');
                    if (page && page > 0 && page <= totalPages) {
                        loadOrders(status, page);
                    }
                });
            }


            // Tải dữ liệu mặc định (tất cả đơn hàng)
            loadOrders("All");

            // Xử lý khi thay đổi trạng thái
            $('.owh-item').on('click', function () {
                $('.owh-item-active').removeClass('owh-item-active');
                $(this).addClass('owh-item-active');
                let status = $(this).data('content');
                loadOrders(status);
            });

            // Xử lý khi click vào .order-header
            contentArea.on('click', '.order-header', function () {
                var orderId = $(this).data('order-id');
                var orderDetails = $('.order-details[data-order-id="' + orderId + '"]');

                // Ẩn/hiện chi tiết đơn hàng
                orderDetails.toggle();


            });

            // Delegated event listener cho các button
            contentArea.on('click', '.buy-confirm', function () {
                const orderId = $(this).closest('.order-list').find('.order-header').data('order-id'); // Lấy đúng orderId từ data attribute
                console.log('Xác nhận đơn hàng với ID:', orderId);
                if (orderId) {
                    $.ajax({
                        url: '/Admin/Order/ConfirmOrder',
                        type: 'GET',
                        data: { orderId: orderId },
                        success: function (response) {
                            if (response.success) {
                                toastr.success(response.message, "Success");
                                setTimeout(() => {
                                    location.reload(); // Tải lại trang sau khi hiển thị thông báo thành công
                                }, 2000); // Thời gian chờ 2 giây để đảm bảo người dùng thấy thông báo
                            } else {
                                toastr.error(response.message, "Error");
                            }
                        },
                        error: function () {
                            toastr.error("Đã xảy ra lỗi khi xác nhận đơn hàng.", "Error");
                        }
                    });
                } else {
                    console.log('Không tìm thấy orderId.');
                }
            });

            contentArea.on('click', '.buy-cancel', function () {
                const orderId = $(this).closest('.order-list').find('.order-header').data('order-id'); // Lấy đúng orderId từ data attribute
                console.log('Hủy đơn hàng với ID:', orderId);  // Kiểm tra giá trị orderId
                if (orderId) {
                    $.ajax({
                        url: '/Admin/Order/CancelOrder',
                        type: 'GET',
                        data: { orderId: orderId },
                        success: function (response) {
                            if (response.success) {
                                toastr.success(response.message, "Success");
                                setTimeout(() => {
                                    location.reload(); // Tải lại trang sau khi hiển thị thông báo thành công
                                }, 2000); // Thời gian chờ 2 giây để đảm bảo người dùng thấy thông báo
                            } else {
                                toastr.error(response.message, "Error");
                            }
                        },
                        error: function () {
                            toastr.error("Đã xảy ra lỗi khi hủy đơn hàng.", "Error");
                        }
                    });
                } else {
                    console.log('Không tìm thấy orderId.');
                }
            });

            contentArea.on('click', '.delivery-confirmation', function () {
                const orderId = $(this).closest('.order-list').find('.order-header').data('order-id'); // Lấy đúng orderId từ data attribute
                console.log('Xác nhận giao hàng với ID:', orderId);  // Kiểm tra giá trị orderId

                // Cập nhật giá trị orderId trong modal
                $('#orderId').val(orderId);

                // Hiển thị modal
                $('#deliveryConfirmationModal').modal('show');
            });

            $('#deliveryImages').on('change', function (event) {
                const files = event.target.files;
                const imagePreview = $('#imagePreview');
                imagePreview.empty(); // Xóa các ảnh cũ trong preview

                if (files.length > 0) {
                    Array.from(files).forEach((file) => {
                        if (!file.type.startsWith('image/')) {
                            toastr.warning('Chỉ được chọn file ảnh.', "Warning");
                            return;
                        }

                        const reader = new FileReader();
                        reader.onload = function (e) {
                            const img = $('<img>')
                                .attr('src', e.target.result)
                                .addClass('img-thumbnail')
                                .css({ 'max-width': '150px', 'margin-right': '10px', 'margin-bottom': '10px' });
                            imagePreview.append(img);
                        };
                        reader.readAsDataURL(file);
                    });
                }
            });

            $('#submitDeliveryConfirmation').on('click', function () {
                const orderId = $('#orderId').val();
                const files = $('#deliveryImages')[0].files;

                if (!orderId) {
                    toastr.error('Mã đơn hàng không hợp lệ.', "Error");
                    return;
                }

                if (files.length === 0) {
                    toastr.warning('Vui lòng chọn ít nhất một ảnh xác nhận giao hàng.', "Warning");
                    return;
                }

                const formData = new FormData();
                formData.append('orderId', orderId);

                Array.from(files).forEach((file) => formData.append('deliveryImages', file));

                $.ajax({
                    url: '/Admin/Order/DeliveryConfirmation',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        if (response.success) {
                            toastr.success(response.message, "Success");
                            $('#deliveryConfirmationModal').modal('hide');
                            setTimeout(() => location.reload(), 2000);
                        } else {
                            toastr.error(response.message, "Error");
                        }
                    },
                    error: function () {
                        toastr.error('Có lỗi xảy ra, vui lòng thử lại.', "Error");
                    }
                });
            });

            contentArea.on('click', '.queryImage', function () {
                const orderId = $(this).closest('.order-list').find('.order-header').data('order-id');
                if (orderId) {
                    $.ajax({
                        url: '/Admin/Order/QueryImages',
                        type: 'GET',
                        data: { orderId: orderId },
                        success: function (response) {
                            if (response.success) {
                                var images = response.images;

                                // Kiểm tra xem có ảnh hay không
                                if (images && images.length > 0) {
                                    var previewContainer = $('#imagePreview-1');
                                    previewContainer.empty(); // Xóa ảnh cũ

                                    // Hiển thị từng ảnh
                                    images.forEach(function (imagePath) {
                                        var img = $('<img>')
                                            .attr('src', imagePath)
                                            .addClass('img-thumbnail')
                                            .css({
                                                'max-width': '200px',
                                                'max-height': '200px',
                                                'margin-right': '10px'
                                            });
                                        previewContainer.append(img);
                                    });

                                    // Hiển thị modal
                                    $('#deliveryConfirmationModal-1').modal('show');
                                } else {
                                    toastr.warning("Không có ảnh xác nhận nào được tìm thấy.", "Thông báo");
                                }
                            } else {
                                toastr.error(response.message || "Không thể truy vấn ảnh.", "Error");
                            }
                        },
                        error: function () {
                            toastr.error("Đã xảy ra lỗi khi truy vấn ảnh.", "Error");
                        }
                    });
                } else {
                    console.log('Không tìm thấy orderId.');
                }
            });

            contentArea.on('click', '.transaction-query', function () {
                const orderId = $(this).closest('.order-list').find('.order-header').data('order-id'); // Lấy đúng orderId từ data attribute
                console.log('Truy vấn giao dịch cho đơn hàng với ID:', orderId);  // Kiểm tra giá trị orderId
                if (orderId) {
                    $.ajax({
                        url: '/Admin/Order/TransactionQuery',
                        type: 'GET',
                        data: { orderId: orderId },
                        success: function (response) {
                            if (!response.success) {
                                toastr.error(response.message, "Error");
                            }
                            if (response.success) {
                                $('#transactionQueryMessage').text(response.message); // Hiển thị thông báo
                                const data = response.data;
                                let transactionInfo = '';

                                if (data.VnpTxnRef) {
                                    transactionInfo += `<strong>Mã giao dịch:</strong> ${data.VnpTxnRef} <br>`;
                                }

                                if (data.VnpAmount) {
                                    transactionInfo += `<strong>Số tiền:</strong> ${(data.VnpAmount / 100).toLocaleString()} VND <br>`;
                                }

                                if (data.VnpOrderInfo) {
                                    transactionInfo += `<strong>Thông tin đơn hàng:</strong> ${data.VnpOrderInfo} <br>`;
                                }

                                if (data.VnpBankCode) {
                                    transactionInfo += `<strong>Ngân hàng:</strong> ${data.VnpBankCode} <br>`;
                                }

                                if (data.VnpPayDate) {
                                    transactionInfo += `<strong>Ngày thanh toán:</strong> ${data.VnpPayDate} <br>`;
                                }

                                if (data.VnpTransactionStatus) {
                                    transactionInfo += `<strong>Trạng thái giao dịch:</strong> ${data.VnpTransactionStatus === "00" ? 'Thành công' : 'Thất bại'} <br>`;
                                }

                                if (data.VnpResponseCode) {
                                    transactionInfo += `<strong>Mã phản hồi:</strong> ${data.VnpResponseCode} <br>`;
                                }

                                if (data.VnpMessage) {
                                    transactionInfo += `<strong>Thông báo:</strong> ${data.VnpMessage} <br>`;
                                }
                                $('#transactionQueryMessage').html(transactionInfo);
                                // Mở cửa sổ modal
                                $('#transactionQueryModal').modal('show');
                            }
                        },
                        error: function () {
                            toastr.error("Đã xảy ra lỗi khi truy vấn đơn hàng.", "Error");
                        }
                    });
                } else {
                    console.log('Không tìm thấy orderId.');
                }
            });

            contentArea.on('click', '.refund-request', function () {
                const orderId = $(this).closest('.order-list').find('.order-header').data('order-id'); // Lấy đúng orderId từ data attribute
                console.log('Yêu cầu hoàn tiền cho đơn hàng với ID:', orderId);  // Kiểm tra giá trị orderId
                if (orderId) {
                    $.ajax({
                        url: '/Admin/Order/RefundRequest',
                        type: 'GET',
                        data: { orderId: orderId },
                        success: function (response) {
                            if (!response.success) {
                                toastr.error(response.message, "Error");
                            }
                            if (response.success) {
                                const data = response.data;

                                let refundInfo = '';

                                if (data.Vnp_TxnRef) {
                                    refundInfo += `<strong>Mã giao dịch:</strong> ${data.Vnp_TxnRef} <br>`;
                                }

                                if (data.Vnp_Amount) {
                                    refundInfo += `<strong>Số tiền hoàn trả:</strong> ${(data.Vnp_Amount / 100).toLocaleString()} VND <br>`;
                                }

                                if (data.Vnp_OrderInfo) {
                                    refundInfo += `<strong>Thông tin đơn hàng:</strong> ${data.Vnp_OrderInfo} <br>`;
                                }

                                if (data.Vnp_BankCode) {
                                    refundInfo += `<strong>Ngân hàng:</strong> ${data.Vnp_BankCode} <br>`;
                                }

                                if (data.Vnp_PayDate) {
                                    refundInfo += `<strong>Ngày thanh toán:</strong> ${data.Vnp_PayDate} <br>`;
                                }

                                if (data.Vnp_ResponseCode) {
                                    refundInfo += `<strong>Mã phản hồi:</strong> ${data.Vnp_ResponseCode} <br>`;
                                }

                                if (data.Vnp_Message) {
                                    refundInfo += `<strong>Thông báo:</strong> ${data.Vnp_Message} <br>`;
                                }

                                // Hiển thị thông tin hoàn tiền trong modal
                                $('#transactionQueryMessage').html(refundInfo);
                                // Mở cửa sổ modal
                                $('#transactionQueryModal').modal('show');
                            }
                        },
                        error: function () {
                            toastr.error("Đã xảy ra lỗi khi hoàn tiền đơn hàng.", "Error");
                        }
                    });
                } else {
                    console.log('Không tìm thấy orderId.');
                }
            });
        });
    </script>
}



<style>
    body, html {
        height: 100%;
        margin: 0;
    }

    .page-wrapper {
        display: flex;
        flex-direction: column;
        min-height: 90vh;
    }

    .pagination-container {
        margin-top: auto;
        text-align: center;
        padding: 10px 0;
        background: #f9f9f9; /* Tùy chọn: màu nền */
    }


    .ow-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: nowrap;
    }

    .owh-item {
        flex: 1 1 25%;
        text-align: center;
        padding: 10px;
        cursor: pointer;
    }

        .owh-item:hover {
            background-color: #f0f0f0;
        }

    .owh-item-active {
        font-weight: bold;
        color: #e63946;
        border-bottom: 2px solid #e63946;
    }

    .ow_mainContent {
        max-height: 75vh;
        overflow-y: auto;
        padding: 15px;
        box-sizing: border-box;
    }

    .order-list {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .order-header {
        justify-content: space-between;
        padding: 15px;
        background-color: #f9f9f9;
        border-radius: 8px;
        cursor: pointer; /* Thêm hiệu ứng con trỏ khi di chuột */
    }

    .store-info {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        gap: 5px; /* Thêm khoảng cách giữa các dòng */
    }

    .payment-status, .payment-method {
        font-size: 14px;
        color: #555; /* Màu chữ trung tính */
    }

    .payment-status {
        font-weight: bold; /* In đậm trạng thái thanh toán */
        color: #007bff; /* Màu xanh dương */
    }

    .payment-method {
        font-style: italic; /* Nghiêng để phân biệt phương thức */
        color: #6c757d; /* Màu xám nhạt */
    }

    .store-name {
        font-size: 18px;
        font-weight: bold;
        color: #333;
    }

    .order-status {
        font-size: 14px;
        color: #888;
    }

    .order-review-status {
        display: flex;
        justify-content: flex-end;
        align-items: center;
    }

    .review-status {
        font-size: 14px;
        font-weight: bold;
    }

    .product-list {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .product-item {
        display: flex;
        background-color: #fff;
        border-radius: 8px;
        padding: 10px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        flex-direction: row;
        justify-content: space-between;
        align-items: flex-start;
    }

    .product-image-1 img {
        max-width: 100px;
        height: auto;
        border-radius: 8px;
    }

    .product-info {
        flex-grow: 1;
        padding: 0 10px;
    }

        .product-info h3 {
            font-size: 18px;
            font-weight: bold;
        }

    .product-quantity, .product-price {
        font-size: 14px;
        color: #777;
    }

        .product-price span {
            color: #e63946;
            font-weight: bold;
        }

    .order-summary {
        text-align: right;
    }

        .order-summary p {
            font-size: 16px;
            font-weight: bold;
            margin-bottom: 10px;
        }

    .order-header:hover {
        background-color: #f0f0f0;
    }

    .order-details {
        display: none;
        transition: max-height 0.3s ease-in-out;
        overflow: hidden;
        position: relative; /* Thêm vị trí tương đối để đặt button bên trong */
    }

    /* CSS cho order-actions */
    .order-actions {
        display: flex;
        gap: 10px; /* Khoảng cách giữa các nút */
        justify-content: flex-end;
        margin: 10px;
    }

        /* CSS cho các nút */
        .order-actions button {
            padding: 10px 20px; /* Cỡ nút */
            border: none;
            border-radius: 5px; /* Bo góc nút */
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.3s ease; /* Hiệu ứng hover */
        }

    .buy-confirm {
        background-color: #4CAF50; /* Màu nền xanh cho Xác nhận */
        color: white;
    }

    .buy-cancel {
        background-color: #f44336; /* Màu nền đỏ cho Hủy */
        color: white;
    }

    .transaction-query {
        background-color: #2196F3; /* Màu nền xanh dương cho Truy vấn giao dịch */
        color: white;
    }

    .refund-request {
        background-color: #FF9800; /* Màu nền cam cho Hoàn tiền */
        color: white;
    }

    /* Hiệu ứng hover */
    .order-actions button:hover {
        background-color: #333; /* Màu nền khi hover */
        color: white;
        transform: scale(1.1); /* Tăng kích thước khi hover */
    }
</style>
