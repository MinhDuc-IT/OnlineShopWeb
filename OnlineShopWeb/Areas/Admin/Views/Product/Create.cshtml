@model OnlineShopWeb.Models.Product

@{
    ViewBag.Title = "Create";
}
<div style="border:solid 2px; margin: 20px; padding: 20px; border-radius:6px; box-shadow: 2px">
    <h2>Create</h2>

    @using (Html.BeginForm("Create", "Product", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>Product</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.BrandId, "BrandId", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("BrandId", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.BrandId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div id="description-editor" contenteditable="true" class="form-control"
                         style="min-height: 200px; overflow-y: auto; background-color: white;">
                    </div>
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <!-- Image Upload Field -->
            <div class="form-group">
                @Html.LabelFor(model => model.Image, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <input type="file" id="Image" name="Image" class="form-control" onchange="previewImage(event)" />
                    <br />
                    <img id="preview" src="#" alt="Image Preview" style="width: 100px; height: 100px; display: none;" />
                    @Html.ValidationMessageFor(model => model.Image, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Stock, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Stock, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Stock, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CategoryId, "CategoryId", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("CategoryId", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CostPrice, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CostPrice, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CostPrice, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group"  style="display:flex; margin-left: 3px">
                <div class="col-md-offset-2 col-md-1">
                    <input type="submit" value="Create" class="btn btn-success" style="width: 106px" />
                </div>
                @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary" })
            </div>
        </div>
    }
</div>
    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")

        <script>
            // Xử lý preview ảnh chính
            function previewImage(event) {
                var reader = new FileReader();
                reader.onload = function () {
                    var output = document.getElementById('preview');
                    output.src = reader.result;
                    output.style.display = 'block';
                }
                reader.readAsDataURL(event.target.files[0]);
            }

            // Xử lý paste ảnh vào Description
            document.getElementById('description-editor').addEventListener('paste', function (e) {
                e.preventDefault();

                var items = (e.clipboardData || e.originalEvent.clipboardData).items;

                for (var i = 0; i < items.length; i++) {
                    if (items[i].type.indexOf('image') !== -1) {
                        // Xử lý paste ảnh
                        var blob = items[i].getAsFile();
                        var reader = new FileReader();

                        reader.onload = function (event) {
                            var img = document.createElement('img');
                            img.src = event.target.result;
                            img.style.maxWidth = '100%';
                            document.getElementById('description-editor').appendChild(img);
                        };

                        reader.readAsDataURL(blob);
                    } else {
                        // Xử lý paste text
                        var text = e.clipboardData.getData('text/plain');
                        document.execCommand('insertText', false, text);
                    }
                }
            });

            // Xử lý submit form
            $('form').submit(function (e) {
                e.preventDefault();

                const price = parseFloat($('[name="Price"]').val());
                const costPrice = parseFloat($('[name="CostPrice"]').val());

                if (isNaN(price) || isNaN(costPrice)) {
                    toastr.error('Price and Cost Price must be valid numbers.', 'Validation Error');
                    return false;
                }

                if (costPrice >= price) {
                    toastr.warning('Cost Price must be less than Price.', 'Validation Warning');
                    return false;
                }
                var editorContent = $('#description-editor').html();
                $('<input>').attr({
                    type: 'hidden',
                    name: 'Description',
                    value: editorContent
                }).appendTo('form');
                this.submit();
            });
        </script>
    }

